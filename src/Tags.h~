// Bracketext.h : fichier Include pour les fichiers Include système standard,
// ou les fichiers Include spécifiques aux projets.

#pragma once

#include "/usr/local/include/lua.hpp"
extern "C" {
//#include <lua50/lua.h>
//#include <lua50/lualib.h>
//#include <lua50/lua.h>
}

#include <locale>
#include <sstream>
#include <fstream>
#include <codecvt>
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

#include "Data.h"

// TODO: Référencez ici les en-têtes supplémentaires nécessaires à votre programme.
class Tags
{
    /*
     * tagNumber/tag
        None -1
        String -2
        OpenBracket -3
        ClosedBracket -4
        StraightLine -5

    */
public:
    static const int nResult = -2; // during a conversion, certain character strings should only be converted once
    static const int nOpenBracket = -3;
    static const int nClosedBracket = -4;
    static const int nStraightLine = -5;
    static const int nParameterBlocks = -7; // contains a complete tag
    static const int nArguments = -8; // contains a complete tag
    static const int nGroup = -9; // groups together successions of tags and strings (without [ | ])
    static const int nTag = -6; // tag
    static const int nMATag = -11; // tag argument to complete
    static const int nNone = -12;
    // we do not define a tag when the parameters are not complete
    static const int nString = -1; // string in parameters

    struct Entity;
    struct Entity
    {
     public:
        int tagNumber;
        std::wstring str; //nul when the entity is a tag
        // public List<Parameter> parameterList;
        std::vector<struct Entity> entityList;
    };

    // Tag association table
    // 0 undefined
    // 1 SINGLE (macro or function)
    // 2 BEGIN_END
    // 3 BEGIN_MIDDLE_END (deleted)
    // 4 BEGIN_REPEATED_MIDDLE_END
    // 5 BEGIN_REPEATED_AT_LEAST_ONCE_MIDDLE_END
    // (not yet implemented)
    // 6 MULTIPLE_REPEATED_MIDDLE_BLOCKS

    static const int TUndefined = 0;
    static const int TSingle = 1;
    static const int TBeginEnd = 2;
    static const int TBeginMiddleEnd = 3;
    static const int TBeginRepeatedMiddleEnd = 4;

    static const int TMultipleRepeatedMiddleBlocks = 6;

    // Tag types in the same association.
    // "/" Beginning
    // "1", ..., "9" from 1 to 9 intermediate tag number
    // only "1" and "2" are currently being used
    // "." end

    static const std::wstring TB;
    static const std::wstring TE;

    /*
     * List that was originally used for testing.
     *
    List<string[]> tagInfoList = new List<string[]>
    {
        new string[]{ "1", "Hello"},
        new string[]{ "2", "title", "/title"},
        new string[]{ "2", "h1", "/h1"},
        new string[]{ "2", "h2","/h2"},
        new string[]{ "2", "h3","/h3"},
        new string[]{ "2", "h4","/h4"},
        new string[]{ "2", "h5","/h5"},
        new string[]{ "2", "h6","/h6"},
        new string[]{ "2", "b","/b"},
        new string[]{ "2", "i","/i"},
        new string[]{ "2", "u","/u"},
        new string[]{ "2", "s","/s"},
        new string[]{ "2", "size","/size"},
        new string[]{ "2", "style","/style"},
        new string[]{ "2", "color","/color"},
        new string[]{ "2", "center", "/center"},
        new string[]{ "2", "left","/left"},
        new string[]{ "2", "right","/right"},
        new string[]{ "2", "quote","/quote"},
        new string[]{ "2", "url","/url"},
        new string[]{ "2", "img","/img"},
        new string[]{ "2", "ul","/ul"},
        new string[]{ "2", "ol","/ol"},
        new string[]{ "2", "li","/li"},
        new string[]{ "2", "code","/code"},
        new string[]{ "2", "table","/table"},
        new string[]{ "2", "tr","/tr"},
        new string[]{ "2", "th","/th"},
        new string[]{ "2", "td","/td"},
        new string[]{ "2", "youtube", "/youtube"},
        new string[]{ "3", "li","-", "/li"},
        new string[]{ "4", "list","*", "/list"},
    };
    */
    static std::vector< std::vector<std::wstring>> tagInfoList;
    // list of information about tags
    // list of information about tags
    static std::vector<std::wstring> commandList;
    // list of commands associated with tags
    static std::vector<std::wstring> functionNameList;
    // command name list

    static std::vector<std::wstring> scriptList;
    // list of functions of global scope

    static std::vector<std::vector<int>> tagAssociationList;
    static std::vector<std::wstring> tagList;
    static std::vector<int> tagEntryList;
    static std::vector<int> tagTypeList;
    static std::vector<int> tagPositionList;
    static std::vector<Entity> document;

    struct info
    {
    public:
        std::wstring sep;
        int entry;
        int pos;
    };

    public:
        static std::wstring SubStr(std::wstring& s, int n);
        static std::wstring readFile(const char* filename);
        static std::wstring Trim(std::wstring& str);
        static std::vector<std::wstring> split(const std::wstring& s, const wchar_t delimiter);
        static void LoadMacros(std::string psFileName);
        static void Init();

        static bool IsNotDelim(wchar_t c);
        static bool IsNotSymbol(wchar_t c);
        static int CharToTagNumber(wchar_t c);

        static std::wstring TagNumberToWString(int t);
        static std::wstring CleanTag(std::wstring& t);

        static void BBCodeToTree();

        static void ReductionG(int& i, int j, bool& modified);
        static void Reduction1(int ii, int j);
        static void Reduction2(int ii, int j, int last, std::vector<int> asso);

        static std::vector<std::wstring> GetParameters(Tags::Entity tag);
        static std::wstring DocumentToHTML();
        static void ScanFile(std::string fileName);
		static void EvalTree();

        private:
            static std::wstring TagToString(Entity e);
            static std::vector<std::wstring> ToStringArrayList(std::vector<Tags::Entity> le, std::vector<int> index);

            static std::wstring HTMLEntities(std::wstring s);
            static void SymbolTagToString(std::vector<Tags::Entity> eList, int pos);
            static void SymbolTagToHTML(std::vector<Tags::Entity> eList, int pos);
            static std::wstring StringifyMATag(Tags::Entity e);
            
            static void DisplayEntity(std::vector<Tags::Entity> document);
};