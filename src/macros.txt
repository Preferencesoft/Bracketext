-- <<<<<<
-- ||||||g|
function HTMLEntities(s)
    if not s then return "" end
    
    local result = {}
    local entities = {
        [' '] = "&nbsp;",
        ['<'] = "&lt;",
        ['>'] = "&gt;",
        ['&'] = "&amp;",
        ['"'] = "&quot;",
        ["'"] = "&apos;",
        ['¢'] = "&cent;",
        ['£'] = "&pound;",
        ['¥'] = "&yen;",
        ['€'] = "&euro;",
        ['©'] = "&copy;",
        ['®'] = "&reg;",
    }
    
    -- Iterate through each UTF-8 character
    for _, char in utf8.codes(s) do
        local utf8_char = utf8.char(char)
        local replacement = entities[utf8_char]
        
        if replacement then
            table.insert(result, replacement)
        else
            table.insert(result, utf8_char)
        end
    end
    
    return table.concat(result)
end
-- >>>>>>
-- <<<<<<
-- ||||||g|
function toXML(s)
    local n = #s
    local str = ""
    for i = 1, n do
        local r = s:sub(i,i)
        if r == "<" then
            r = "&lt;"
        elseif r == ">" then
            r = "&gt;"
        elseif r == "&" then
            r = "&amp;"
        elseif r == '"' then
            r = "&quot;"
        elseif r == "'" then
            r = "&apos;"
        end
        str = str .. r
    end
    return str
end
-- >>>>>>
-- <<<<<<
-- ||||||g|
function toHTML(s)
    local n = #s
    local str = ""
    for i = 1, n do
        local r = s:sub(i,i)
        if r == "<" then
            r = "&lt;"
        elseif r == ">" then
            r = "&gt;"
        elseif r == "&" then
            r = "&amp;"
        elseif r == '"' then
            r = "&quot;"
        elseif r == "'" then
            r = "&apos;"
        elseif r == "¢" then
            r = "&cent;"
        elseif r == "£" then
            r = "&pound;"
        elseif r == "¥" then
            r = "&yen;"
        elseif r == "€" then
            r = "&euro;"
        elseif r == "©" then
            r = "&copy;"
        elseif r == "®" then
            r = "&reg;"
        end
        str = str .. r
    end
    return str
end
-- >>>>>>
-- <<<<<<
-- ||||||g|
function toString(strList)
    local str = ''
    local len = #strList
    for i = 1, len do
        str = str .. strList[i]
    end
    return str
end
-- >>>>>>
-- <<<<<<
-- ||||||2|b|/b
function outB(pa, ar)
 local oList = {}
table.insert(oList,'\1<b>\4')
   if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
    local str = ar[1]
    table.insert(oList,str)  
  end
table.insert(oList,'\1</b>\4')
return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||2|title|/title
function outTitle(pa, ar)
    local oList = {}
    local x = '1'
    if type(pa) == "table" and #pa > 0 and type(pa[1]) == "table" and #pa[1] > 0 then
        local p = pa[1]
        if type(p[1]) == "string" then
          x = p[1]
          local num = '123456'
          if not num:find(x) then x = '1' end
        end
    end
    table.insert(oList,'\1')
    table.insert(oList, '<h' .. x .. '>')
    table.insert(oList,'\4')
    if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
        table.insert(oList, ar[1])
    end
    table.insert(oList,'\1')
    table.insert(oList, '</h' .. x .. '>')
    table.insert(oList,'\4')
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||2|u|/u
function outU(pa, ar) 
local oList = {}
table.insert(oList,'\1')
table.insert(oList,'<u>')
table.insert(oList,'\4')
if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
  table.insert(oList,ar[1])
end
table.insert(oList,'\1')
table.insert(oList,'</u>')
table.insert(oList,'\4')
return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||2|i|/i
function outI(pa, ar) 
local oList = {}
table.insert(oList,'\1')
table.insert(oList,'<i>')
table.insert(oList,'\4')
if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
  table.insert(oList,ar[1])
end
table.insert(oList,'\1')
table.insert(oList,'</i>')
table.insert(oList,'\4')
return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||2|s|/s
function outS(pa, ar) 
local oList = {}
table.insert(oList,'\1')
table.insert(oList,'<del>')
table.insert(oList,'\4')
if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
  table.insert(oList,ar[1])
end
table.insert(oList,'\1')
table.insert(oList,'</del>')
table.insert(oList,'\4')
return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||1|br
function outBr(pa, ar)
local oList = {}
    table.insert(oList,'\1')
    table.insert(oList, '<br>')
    table.insert(oList,'\4')
return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||2|doc|/doc
function outDoc(pa, ar)
local oList = {}
local t='\1<!DOCTYPE html>\n<html>\n   <head>\n\4'
local c ='\1   </head>\n\n   <body>\4'
local b ='\1   </body>\n</html>\4'
table.insert(oList,t)
table.insert(oList,c)
if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
  table.insert(oList,ar[1])
end
table.insert(oList,b)
return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||2|p|/p
function outP(pa, ar)
local oList = {}
table.insert(oList,'\1<p>\4')
if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
  local str=ar[1]
  table.insert(oList,str)
end
table.insert(oList,'\1</p>\4')
return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||2|color|/color
function outColor(pa, ar)
local oList = {}
local col="verdana"
if type(pa) == "table" and #pa > 0 and type(pa[1]) == "table" and #pa[1]>0 then
  local p = pa[1]
  if type(p[1]) == "string" then
    col=p[1]
  end
end
table.insert(oList, '\1<span style="color: ' .. col .. ';">\4')
 if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
   table.insert(oList, ar[1])
 end
table.insert(oList, '\1</span>\4')
return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||2|size|/size
function outSize(pa, ar)
    local y = '16px'
if type(pa) == "table" and #pa > 0 and type(pa[1]) == "table" and #pa[1]>0 then
  local p = pa[1]
  if type(p[1]) == "string" then
    y = p[1]
    -- Check if y contains a digit (y is a string, not table)
    local hasDigit = string.match(y, "%d") ~= nil
    if hasDigit then
       y = y .. '%'  -- Fixed: use .. for concatenation, not +=
    end
  end
end    
local x = ""
 if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
            x = ar[1]
 end
oList = {}
table.insert(oList, '\1<span style="font-size:\4' .. y .. '\1;">\4' .. x .. '\1</span>\4')
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||2|quote|/quote
function outQuote(pa, ar)
local oList = {}
table.insert(oList, '\1<blockquote class="bg-gray primary">\4')
if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
  table.insert(oList,ar[1])
end
table.insert(oList, '\1</blockquote>\4')
return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||2|url|/url
function outURL(pa, ar)
    local oList = {}
    local ae = false
    local pe = false
    local p
    local a
    if type(pa) == "table" and #pa > 0 and type(pa[1]) == "table" and #pa[1]>0 then
      local p1 = pa[1]
      if type(p1[1]) == "string" then
          pe = true
          p = p1[1]
      end
    end
    if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
      ae = true
      a=ar[1]
    end
    local e = ae or pe
    if e then
        table.insert(oList, '\1<a href="\4')
        if pe then
          table.insert(oList, p)
          table.insert(oList, '\1">\4')
          table.insert(oList, a)
        else
          table.insert(oList, a)
          table.insert(oList, '\1">\4')
          table.insert(oList, p)
        end
        table.insert(oList, '\1</a>\4')
   else
     table.insert(oList, '\1<a href=""></a>\4')
  end
  return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||2|nofollow|/nofollow
function outNofollow(pa, ar)
    local oList = {}
    local ae = false
    local pe = false
    local a
    local p
    if type(pa) == "table" and #pa > 0 and type(pa[1]) == "table" and #pa[1]>0 then
      local p1 = pa[1]
      if type(p1[1]) == "string" then
            pe = true
            p = p1[1]
      end
    end
    if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
        ae = true
        a=ar[1]
    end
    local e = ae or pe
    if ae and not pe then
        p = a
    end
    if not ae and pe then
        a = p
    end
    if e then
        table.insert(oList, '\1<a href="\4')
        table.insert(oList, p)
        table.insert(oList, '\1" rel="nofollow">\4')
        table.insert(oList, a)
        table.insert(oList, '\1</a>\4')
    else
        table.insert(oList, '\1<a href="" rel="nofollow">\4')
        table.insert(oList, '\1</a>\4')
    end
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||1|img
function outImg(pa, ar)
    local oList = {}
    table.insert(oList, '\1<img src="\4')
   if type(pa) == "table" and #pa > 0 and type(pa[1]) == "table" and #pa[1]>0  then
    local p=pa[1]
    if type(p[1]) == "string" then
        local src = p[1]
        local alt = p[2]
        table.insert(oList, src)
        table.insert(oList, '\1" alt="\4')
        table.insert(oList, alt)
        table.insert(oList, '\1" />\4')
    else
       table.insert(oList, '\1<img src="" alt=""/>\4')
    end
   else
       table.insert(oList, '\1<img src="" alt=""/>\4')
   end 
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||1|bimg
function outBimg(pa, ar)
    local oList = {}
    table.insert(oList, '\1<img class="img-fluid" src="\4')
   if type(pa) == "table" and #pa > 0 and type(pa[1]) == "table" and #pa[1]>0  then
    local p=pa[1]
    if #p > 1 and type(p) == "table" then
        local src = p[1]
        local alt = p[2]
        table.insert(oList, src)
        table.insert(oList, '\1" alt="\4')
        table.insert(oList, alt)
        table.insert(oList, '\1" />\4')
    else
       table.insert(oList, '\1<img src="" alt=""/>\4')
    end
   else
       table.insert(oList, '\1<img src="" alt=""/>\4')
   end 
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||2|ul|/ul
function outUl(pa, ar)
local oList = {}
table.insert(oList, '\1<ul>\4')
if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
  table.insert(oList,ar[1])
end
table.insert(oList, '\1</ul>\4')
return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||2|ol|/ol
function outOl(pa, ar)
    local oList = {}
    table.insert(oList, '\1<ol>\4')
    if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
      table.insert(oList,ar[1])
    end    
    table.insert(oList, '\1</ol>\4')
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||2|li|/li
function outLi(pa, ar)
    local oList = {}
    table.insert(oList, '\1<li>\4')
    if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
       table.insert(oList,ar[1])
    end    
    table.insert(oList, '\1</li>\4')
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||2|code|/code
function outCode(pa, ar)
local oList = {}
table.insert(oList, '\1<code>\4')
if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
table.insert(oList,ar[1])
end
table.insert(oList, '\1</code>\4')
return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||2|htm|/htm
function outHtm(pa, ar)
    local oList = {}
    if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
       table.insert(oList,ar[1])
    end    
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||2|table|/table
function outTable(pa, ar)
    local oList = {}
    table.insert(oList, '\1<table>\4')
    if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
       table.insert(oList,ar[1])
    end    
    table.insert(oList, '\1</table>\4')
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||2|tr|/tr
function outTr(pa, ar)
    local oList = {}
    table.insert(oList, '\1<tr>\4')
    if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
       table.insert(oList,ar[1])
    end
    table.insert(oList, '\1</tr>\4')
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||2|th|/th
function outTh(pa, ar)
    local oList = {}
    table.insert(oList, '\1<th>\4') 
    if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
       table.insert(oList,ar[1])
    end        
    table.insert(oList, '\1</th>\4')
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||2|td|/td
function outTd(pa, ar)
    local oList = {}
    table.insert(oList, '\1<td>\4')
    if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
       table.insert(oList,ar[1])
    end    
    table.insert(oList, '\1</td>\4')
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||3|list|*|/list
function outList(pa, ar)
        local oList = {}
        local b = '\1<ul>\4'
        local e = '\1</ul>\4'
   if type(pa) == "table" and #pa > 0 and type(pa[1]) == "table" and #pa[1] > 0 then
      local p = pa[1]
      if type(p) == "string" then
        local x = p[1]
      end
   end
    if x == '1' then
        b = '\1<ol style="list-style-type: decimal">\4'
        e = '\1</ol>\4'
    elseif x == 'a' then
        b = '\1<ol style="list-style-type: lower-alpha">\4'
        e = '\1</ol>\4'
    else
        b = '\1<ul>\4'
        e = '\1</ul>\4'
    end
    table.insert(oList, b)
    if type(ar) == "table" and #ar > 0 then
    local lenar=#ar
    for i=1,lenar do
      if type(ar[i]) == "string" then
        table.insert(oList, '\1<li>\4')
        table.insert(oList, ar[i])
        table.insert(oList, '\1</li>\4')
      end
    end 
    end
    table.insert(oList, e)
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||2|email|/email
function outEmail(pa, ar)
    local oList = {}
    local ae = false
    local pe = false
    local p
    local a
 if type(pa) == "table" and #pa > 0 and type(pa[1]) == "table" and #pa[1] > 0 then
      if type(pa[1][1]) == "string" then
        pe=true
        p = pa[1][1]
      end
   end
   if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
        ae = true
        a = ar[1]
    end
    local e = ae or pe
    if ae and not pe then
        p = a
    end
    if not ae and pe then
        a = p
    end
    if e ~="" then
        table.insert(oList, '\1<a href="mailto:\4')
        table.insert(oList, p)
        table.insert(oList, '\1">\4')
        table.insert(oList, a)
        table.insert(oList, '\1</a>\4')
    else
        table.insert(oList, '\1<a href="mailto:">\4')
        table.insert(oList, '\1</a>\4')
    end
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||3|btable|C|/btable
function outBtable(pa, ar)
    local oList = {}
    local nrow = 1
    local ncol = 1
 if type(ar) == "table" and #ar > 0 then
    ncol = #ar
 end
 if type(pa) == "table" and #pa > 0 and type(pa[1]) == "table" and #pa[1] > 1 then
      local p = pa[1]
      if type(p[1]) == "string" and type(p[2]) == "string" then
            nrow = tonumber(p[1])
            ncol = tonumber(p[2])
      end
   end
    local lena = #ar
    local k = 0
    table.insert(oList, '\1<table class="table table-striped table-bordered">\4')
    table.insert(oList, '\1<thead>\4')
    table.insert(oList, '\1<tr>\4')

    for j = 0, ncol - 1 do
        table.insert(oList, '\1<th>\4')
        if k < lena then
            table.insert(oList, ar[k+1])
            table.insert(oList, '\1</th>\4')
        end
        k = k + 1
    end
    table.insert(oList, '\1</tr>\4')
    table.insert(oList, '\1</thead>\4')
    table.insert(oList, '\1<tbody>\4')
    for i = 2, nrow do
        table.insert(oList, '\1<tr>\4')
        for j = 0, ncol - 1 do
            table.insert(oList, '\1<td>\4')
            if k < lena then
                    table.insert(oList, ar[k+1])
                k = k + 1
            end
            table.insert(oList, '\1</td>\4')
        end
        table.insert(oList, '\1</tr>\4')
    end
    table.insert(oList, '\1</tbody>\4')
    table.insert(oList, '\1</table>\4')
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||1|command
function outCommand(pa, ar)
    local oList = {}
    table.insert(oList, '\1<span class="command">\4')
    if type(pa) == "table" and #pa > 0 and type(pa[1]) == "table" and #pa[1] > 0 then
        local p = pa[1]
        if type(p[1]) == "string" then
                        table.insert(oList, p[1])
                end
            end
    table.insert(oList, '\1</span>\4')
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||1|language
function outLanguage(pa, ar)
    local oList = {}
    table.insert(oList, '\1<span class="language">\4')
    if type(pa) == "table" and #pa > 0 and type(pa[1]) == "table" and #pa[1] > 0 then
        local p = pa[1]
        if type(p[1]) == "string" then
                        table.insert(oList, p[1])
                end
            end
    table.insert(oList, '\1</span>\4')
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||1|file
function outFile(pa, ar)
    local oList = {}
    table.insert(oList, '\1<span class="file">\4')
    if type(pa) == "table" and #pa > 0 and type(pa[1]) == "table" and #pa[1] > 0 then
        local p = pa[1]
        if type(p[1]) == "string" then
                        table.insert(oList, p[1])
                end
            end
    table.insert(oList, '\1</span>\4')
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||1|extension
function outExtension(pa, ar)
    local oList = {}
    table.insert(oList, '\1<span class="file">\4')
    if type(pa) == "table" and #pa > 0 and type(pa[1]) == "table" and #pa[1] > 0 then
        local p = pa[1]
        if type(p[1]) == "string" then
                        table.insert(oList, p[1])
                end
            end
    table.insert(oList, '\1</span>\4')
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||1|directory
function outDirectory(pa, ar)
    local oList = {}
    table.insert(oList, '\1<span class="directory">\4')
    if type(pa) == "table" and #pa > 0 and type(pa[1]) == "table" and #pa[1] > 0 then
        local p = pa[1]
        if type(p[1]) == "string" then
                        table.insert(oList, p[1])
                end
            end
    table.insert(oList, '\1</span>\4')
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||1|path
function outPath(pa, ar)
    local oList = {}
    table.insert(oList, '\1<span class="path">\4')
    if type(pa) == "table" and #pa > 0 and type(pa[1]) == "table" and #pa[1] > 0 then
        local p = pa[1]
        if type(p[1]) == "string" then
                        table.insert(oList, p[1])
                end
            end
    table.insert(oList, '\1</span>\4')
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||1|trademark
function outTrademark(pa, ar)
    local oList = {}
    table.insert(oList, '\1<span class="trademark">\4')
    if type(pa) == "table" and #pa > 0 and type(pa[1]) == "table" and #pa[1] > 0 then
        local p = pa[1]
        if type(p[1]) == "string" then
                        table.insert(oList, p[1])
                end
            end    
    table.insert(oList, '\1</span>\4')
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||1|item
function outItem(pa, ar)
    local oList = {}
    table.insert(oList, '\1<span class="item">\4')
    if type(pa) == "table" and #pa > 0 and type(pa[1]) == "table" and #pa[1] > 0 then
        local p = pa[1]
        if type(p[1]) == "string" then
                        table.insert(oList, p[1])
                end
            end
    table.insert(oList, '\1</span>\4')
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||1|iurl
function outIurl(pa, ar)
    local oList = {}
    table.insert(oList, '\1<span class="url">\4')
    if type(pa) == "table" and #pa > 0 and type(pa[1]) == "table" and #pa[1] > 0 then
        local p = pa[1]
        if type(p[1]) == "string" then
                        table.insert(oList, p[1])
                end
            end
    table.insert(oList, '\1</span>\4')
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||1|example
function outExample(pa, ar)
    local oList = {}
    table.insert(oList, '\1<span class="definition">\4')
    if type(pa) == "table" and #pa > 0 and type(pa[1]) == "table" and #pa[1] > 0 then
        local p = pa[1]
        if type(p[1]) == "string" then
                        table.insert(oList, p[1])
                end
            end
    table.insert(oList, '\1</span>\4')
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||1|definition
function outDefinition(pa, ar)
    local oList = {}
    table.insert(oList, '\1<span class="definition">\4')
    if type(pa) == "table" and #pa > 0 and type(pa[1]) == "table" and #pa[1] > 0 then
        local p = pa[1]
        if type(p[1]) == "string" then
                        table.insert(oList, p[1])
                end
            end
    table.insert(oList, '\1</span>\4')
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||1|output
function outOutput(pa, ar)
    local oList = {}
    table.insert(oList, '\1<span class="output">\4')
    if type(pa) == "table" and #pa > 0 and type(pa[1]) == "table" and #pa[1] > 0 then
        local p = pa[1]
        if type(p[1]) == "string" then
                        table.insert(oList, p[1])
                end
            end
    table.insert(oList, '\1</span>\4')
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||2|output-box|/output-box
function outOutputBox(pa, ar)
    local oList = {}
    table.insert(oList, '\1<div class="output-box">\4')
    if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
       table.insert(oList,ar[1])
    end
    table.insert(oList, '\1</div>\4')
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||1|input
function outInput(pa, ar)
    local oList = {}
    table.insert(oList, '\1<span class="input">\4')
    if type(pa) == "table" and #pa > 0 and type(pa[1]) == "table" and #pa[1] > 0 then
        local p = pa[1]
        if type(p[1]) == "string" then
                        table.insert(oList, p[1])
                end
            end
    table.insert(oList, '\1</span>\4')
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||2|input-box|/input-box
function outInputBox(pa, ar)
    local oList = {}
    table.insert(oList, '\1<div class="input-box">\4')
    if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
       table.insert(oList,ar[1])
    end
    table.insert(oList, '\1</div>\4')
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||2|icode|/icode
function outOcode(pa, ar)
    local oList = {}
    table.insert(oList, '\1<code>\4')
    if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
       table.insert(oList,ar[1])
    end        
    table.insert(oList, '\1</code>\4')
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||2|definition-box|/definition-box
function outDefinitionBox(pa, ar)
    local oList = {}
    table.insert(oList, '\1<div class="definition">\4')
    if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
       table.insert(oList,ar[1])
    end
    table.insert(oList, '\1</div>\4')
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||2|sup|/sup
function outSup(pa, ar)
    local oList = {}
    table.insert(oList, '\1<sup>\4')
    if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
       table.insert(oList,ar[1])
    end
    table.insert(oList, '\1</sup>\4')
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||2|sub|/sub
function outSub(pa, ar)
    local oList = {}
    table.insert(oList, '\1<sub>\4')
    if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
       table.insert(oList,ar[1])
    end    
    table.insert(oList, '\1</sub>\4')
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||1|hr
function outHr(pa, ar)
return ({'\1<hr />\4'})
end
-- >>>>>>
-- <<<<<<
-- ||||||2|em|/em
function outEm(pa, ar)
    local oList = {}
    table.insert(oList, '\1<em>\4')
    if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
       table.insert(oList,ar[1])
    end    
    table.insert(oList, '\1</em>\4')
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||2|strong|/strong
function outStrong(pa, ar)
    local oList = {} 
    table.insert(oList, '\1<strong>\4')
    if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
       table.insert(oList,ar[1])
    end    
    table.insert(oList, '\1</strong>\4')
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||2|burl|/burl
function outBurl(pa, ar)
    local oList = {}
    local ae = false
    local pe = false
    local a
    local p
    -- Check if p has content (Lua is 1-indexed)
    if type(pa) == "table" and #pa > 0 and type(pa[1]) == "table" and #pa[1] > 0 then
        local p1 = pa[1]
        if type(p1[1]) == "string" then
             pe = true
             p=p1[1]
                end
            end
    -- Check if a has content
   if type(ar) == "table" and #ar > 0 and type(ar[1]) == "string" then
        ae = true
        a = ar[1]
    end
    local e = ae or pe
    if ae and not pe then
        p = a
    end
    if not ae and pe then
        a = p
    end
    if pe then
        table.insert(oList, '\1<a class="lead text-purple" href="\4')
       table.insert(oList, p)
       table.insert(oList, '\1">\4')
        -- Build link text from a
        if ae then
                table.insert(oList, a)
        end
        table.insert(oList, '\1</a>\4')
    else
        table.insert(oList, '\1<a class="lead text-purple" href="">\4')
        if ae then
            table.insert(oList, a)
        end
        table.insert(oList, '\1</a>\4')
    end
    return oList
end
-- >>>>>>
-- <<<<<<
-- ||||||1|sp
function outSp(pa, ar)
    local oList = {}
    local x = 1
    -- Check if p has content (Lua is 1-indexed)
    if type(pa) == "table" and #pa > 0 and type(pa[1]) == "table" and #pa[1] > 0 then
        local p = pa[1]
        if type(p[1]) == "string" then
          x = tonumber(p[1])
          if not x then
            x=1
          end
        end
    end
    -- Add non-breaking spaces
    for i = 1, x do  -- Start at 1, go up to x
        table.insert(oList, '\1&nbsp;\4')
    end
    return oList
end
-- >>>>>>